# -*- coding: utf-8 -*-
"""practica2_2.ipynb

Automatically generated by Colaboratory.

"""

from google.colab import drive
drive.mount('/content/gdrive')

!ls "./gdrive/My Drive/Colab Notebooks/dataset/"

from matplotlib.pyplot import imshow
import numpy as np
from PIL import Image

# %matplotlib inline
pil_im = Image.open('./gdrive/My Drive/Colab Notebooks/dataset/train/2357 Brick corner 1x2x2/201706171206-0001.png', 'r')
imshow(np.asarray(pil_im))

import tensorflow as tf
tf.test.gpu_device_name()

from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Dense, Dropout
from keras.optimizers import RMSprop
from keras.layers import Dense, Dropout, Flatten
from keras.layers import Conv2D, MaxPooling2D
from keras import backend as K
import keras
from time import time

from keras.callbacks import ModelCheckpoint
import matplotlib.pyplot as plt


# DATA SOURCE --------------------------------------------------

batch_size = 20

train_data_dir = './gdrive/My Drive/Colab Notebooks/dataset/train/'
validation_data_dir = './gdrive/My Drive/Colab Notebooks/dataset/valid/'

train_datagen = ImageDataGenerator(
        rescale=1./255,
        shear_range=0.2,
        zoom_range=0.2,
        horizontal_flip=True)

test_datagen = ImageDataGenerator(rescale=1./255)

train_generator = train_datagen.flow_from_directory(
        train_data_dir,
        target_size=(150, 150),
        batch_size=batch_size,
        class_mode='categorical')

validation_generator = test_datagen.flow_from_directory(
        validation_data_dir,
        target_size=(150, 150),
        batch_size=32,
        class_mode='categorical')

# MODEL --------------------------------------------------

model = Sequential()



model.add(Conv2D(32, kernel_size=(3, 3),
                 activation='relu',
                 input_shape=(150, 150, 3)))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.40))
model.add(Flatten())
model.add(Dense(128, activation='relu'))

model.add(Dropout(0.5))
model.add(Dense(16, activation='softmax'))

model.compile(loss=keras.losses.categorical_crossentropy,
              optimizer='adam',
              metrics=['accuracy'])

model.summary()

# TRAINING --------------------------------------------------

epochs = 100
checkpointer = ModelCheckpoint(filepath='./gdrive/My Drive/Colab Notebooks/dataset/weights_2.hdf5', verbose=1, save_best_only=True)

out=model.fit_generator(
        train_generator,
        steps_per_epoch=100,
        epochs=epochs, 
        validation_data=validation_generator,
        validation_steps=100,
        callbacks=[checkpointer]
)



# Plot training & validation accuracy values
plt.plot(out.history['acc'])
plt.plot(out.history['val_acc'])
plt.title('Model accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train', 'Test'], loc='upper left')
plt.show()

# Plot training & validation loss values
plt.plot(out.history['loss'])
plt.plot(out.history['val_loss'])
plt.title('Model loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train', 'Test'], loc='upper left')
plt.show()
